import pandas as pd
import numpy as np
product_sales = pd.read_csv('product_sales.csv')
product_sales
## Before we can start our exploratory analysis we need to perform data validation on all columns of our new database. Since the table is called product sales any null value on the revenue is actually missing and not a 0. Aknowledeging this enables us to remove all observations with NULL values using a simple command
## Having completed the first step, that is avoiding missing observations to skew the rest of the analysis, we need to make sure the data type of each column is what we are looking for.
product_sales.dtypes
product_sales_v1= product_sales.dropna()
product_sales_v1['sales_method'].unique()
print(product_sales_v2.shape)
product_sales_v2.drop_duplicates()
print(product_sales_v2.shape)
states= product_sales_v2['state'].unique()
print(np.sort(states))
us_state_to_abbrev = {
    "Alabama": "AL",
    "Alaska": "AK",
    "Arizona": "AZ",
    "Arkansas": "AR",
    "California": "CA",
    "Colorado": "CO",
    "Connecticut": "CT",
    "Delaware": "DE",
    "Florida": "FL",
    "Georgia": "GA",
    "Hawaii": "HI",
    "Idaho": "ID",
    "Illinois": "IL",
    "Indiana": "IN",
    "Iowa": "IA",
    "Kansas": "KS",
    "Kentucky": "KY",
    "Louisiana": "LA",
    "Maine": "ME",
    "Maryland": "MD",
    "Massachusetts": "MA",
    "Michigan": "MI",
    "Minnesota": "MN",
    "Mississippi": "MS",
    "Missouri": "MO",
    "Montana": "MT",
    "Nebraska": "NE",
    "Nevada": "NV",
    "New Hampshire": "NH",
    "New Jersey": "NJ",
    "New Mexico": "NM",
    "New York": "NY",
    "North Carolina": "NC",
    "North Dakota": "ND",
    "Ohio": "OH",
    "Oklahoma": "OK",
    "Oregon": "OR",
    "Pennsylvania": "PA",
    "Rhode Island": "RI",
    "South Carolina": "SC",
    "South Dakota": "SD",
    "Tennessee": "TN",
    "Texas": "TX",
    "Utah": "UT",
    "Vermont": "VT",
    "Virginia": "VA",
    "Washington": "WA",
    "West Virginia": "WV",
    "Wisconsin": "WI",
    "Wyoming": "WY",
    "District of Columbia": "DC",
    "American Samoa": "AS",
    "Guam": "GU",
    "Northern Mariana Islands": "MP",
    "Puerto Rico": "PR",
    "United States Minor Outlying Islands": "UM",
    "U.S. Virgin Islands": "VI",
}

product_sales_v2['state_code']= product_sales_v2['state'].apply(lambda x: us_state_to_abbrev.get(x))
product_sales_v2
product_sales_v3= product_sales_v2[product_sales_v2['years_as_customer'] <= 39]
current_year= 2023
foundation_year= 1984
years= np.arange(start= foundation_year, stop= current_year+1, step=1)
customer_years= np.arange(start= 39, stop= -1, step=-1)

year_dict= {}
for A, B in zip(customer_years, years):
    year_dict[A] = B
    

product_sales_v3['customer_since']= product_sales_v3['years_as_customer'].apply(lambda x: year_dict.get(x))
product_sales_v3['customer_since']=  pd.to_datetime(product_sales_v3['customer_since'], format= '%Y')

product_sales_v3['customer_id'] = product_sales_v3['customer_id'].str.replace(" ", "")
sales_by_state= product_sales_v3.groupby('state_code')['revenue'].sum()
print(sales_by_state)
import seaborn as sns
sns.histplot(x= 'sales_method', data= product_sales_v3)
sns.boxplot(x='sales_method',y= 'nb_sold', data=product_sales_v3 )
sns.catplot(x= 'week',y='nb_sold',kind='bar',hue= 'sales_method',  data= product_sales_v2)
customer_table= product_sales_v3.groupby('customer_id')['revenue'].sum()
print(customer_table)
sns.boxplot( data= customer_table)
product_sales_v3.groupby('sales_method')['revenue'].mean()
quant= customer_table.quantile(q=0.95)
customer_table[customer_table> quant].count()
ratio_topcustomers= customer_table[customer_table> quant].count() / customer_table.count()
ratio_topbuyers= customer_table[customer_table> quant].sum()/customer_table.sum()
ratio_productsold_visit= len(product_sales_v3 ) / product_sales_v3['nb_site_visits'].sum()
ratio_sale_revenue= product_sales_v3['revenue'].sum()/ product_sales_v3['nb_sold'].sum()
values= {'% of key customers': round(ratio_topcustomers, 2), 
         'Proportion of revenue by key customers': round(ratio_topbuyers,2) ,       
         'Average sales by website clicks': round(ratio_productsold_visit,2) ,
         'Average revenue per unit': round(ratio_sale_revenue,2)}
pd.DataFrame.from_dict(values, orient= 'index', columns=[' '])
table1= product_sales_v3.groupby(['customer_since'])['revenue'].sum()
table1
sns.lineplot(data=table1)
print(len( product_sales_v3 ))
unique= product_sales_v3['customer_id'].unique()
print( len(unique))
